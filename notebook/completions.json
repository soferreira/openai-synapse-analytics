{
	"name": "completions",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9aa0f56d-b7ff-4429-91eb-450c03555164"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d134efee-67e2-4db0-a253-903d6309fe47/resourceGroups/openai-synapse/providers/Microsoft.Synapse/workspaces/synapse-openai-sample/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://synapse-openai-sample.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Load input data into dataframe**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.load('abfss://openaisynapsesample@openaisynapsesample.dfs.core.windows.net/sample_data.csv', format='csv', header=True)\r\n",
					"display(df)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Create a new column with the prompt to each row"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.withColumn(\"prompt\", \r\n",
					"            concat(lit(\"Decide whether a review's sentiment is positive, neutral, or negative. Review: \")\r\n",
					"            , col(\"review\"), lit(\" Sentiment:\")))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Connect to OpenAI Service and generate completion**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from synapse.ml.cognitive import OpenAICompletion\r\n",
					"from synapse.ml.core.platform import running_on_synapse, find_secret\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"openai_service = \"openai-soferreira\"\r\n",
					"openai_deployment = \"text-davinci-003\"\r\n",
					"\r\n",
					"key = find_secret(\"openai-key\", \"keyvault-openai-demo\")\r\n",
					"\r\n",
					"df_completion = (\r\n",
					"    OpenAICompletion()\r\n",
					"        .setSubscriptionKey(key)\r\n",
					"        .setDeploymentName(openai_deployment)\r\n",
					"        .setUrl(\"https://openai-soferreira.openai.azure.com/\")\r\n",
					"        .setPromptCol(\"prompt\")\r\n",
					"        .setErrorCol(\"error\")\r\n",
					"        .setOutputCol(\"output\"))\r\n",
					"\r\n",
					"display(df_completion)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_completion = completion.transform(df).withColumn(\"response\", col(\"output.choices.text\").getItem(0))\r\n",
					"display(df_completion)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Data Heath Cheks**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.withColumn(\"prompt_country_code\", \r\n",
					"            concat(lit(\"Convert the country name to the ISO alpha 2 code. \\n\\nExample: Country name: Portugal\\n\\nCode: PT\\n\\nCountry: \")\r\n",
					"            , col(\"country\"), lit(\" Code:\")))\r\n",
					"\r\n",
					"df_completion = (\r\n",
					"    OpenAICompletion()\r\n",
					"        .setSubscriptionKey(key)\r\n",
					"        .setDeploymentName(openai_deployment)\r\n",
					"        .setUrl(\"https://openai-soferreira.openai.azure.com/\")\r\n",
					"        .setPromptCol(\"prompt_country_code\")\r\n",
					"        .setErrorCol(\"error\")\r\n",
					"        .setOutputCol(\"country code\"))\r\n",
					"\r\n",
					"display(df_completion)"
				],
				"execution_count": null
			}
		]
	}
}