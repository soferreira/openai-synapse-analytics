{
	"name": "Address",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a1bf4b05-fa4e-401a-b031-d48e0cd3ba0a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d134efee-67e2-4db0-a253-903d6309fe47/resourceGroups/openai-synapse/providers/Microsoft.Synapse/workspaces/synapse-openai-sample/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://synapse-openai-sample.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Leverage batch prompt of OpenAICompletion to standardize the address format**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"# Read input data\r\n",
					"df = spark.read.load('abfss://<storage_account_name>@<container_name>.dfs.core.windows.net/addresses.csv', format='csv', header=True, delimiter=\"|\")\r\n",
					"display(df)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from synapse.ml.cognitive import OpenAICompletion\r\n",
					"from synapse.ml.core.platform import running_on_synapse, find_secret\r\n",
					"\r\n",
					"openai_service = \"<your_openai_service_name>\"\r\n",
					"openai_deployment = \"<your_openai_deployment_name>\"\r\n",
					"\r\n",
					"key = find_secret(\"openai-key\", \"<your_keyvault_name>\")\r\n",
					"\r\n",
					"# API call definition\r\n",
					"completion = (\r\n",
					"    OpenAICompletion()\r\n",
					"        .setSubscriptionKey(key)\r\n",
					"        .setDeploymentName(openai_deployment)\r\n",
					"        .setUrl(\"https://<your_openai_service_name>.openai.azure.com/\")\r\n",
					"        .setMaxTokens(200)\r\n",
					"        .setBatchPromptCol(\"batchPrompt\")\r\n",
					"        .setErrorCol(\"error\")\r\n",
					"        .setOutputCol(\"completions\"))\r\n",
					"\r\n",
					"# Create a batchPrompt where each row as multiple prompts\r\n",
					"df = df.withColumn(\"batchPrompt\", \r\n",
					"    array(\r\n",
					"        concat(lit(\"Provide Country ISO standard two-letter code for the following address: \"), col(\"Address\")),\r\n",
					"        concat(lit(\"Provide the street name for the following address: \"), col(\"Address\")),\r\n",
					"        concat(lit(\"Provide the postal code of the following address: \"), col(\"Address\"))\r\n",
					"    )\r\n",
					")\r\n",
					"\r\n",
					"completed_batch_df = batch_completion.transform(df).cache()\r\n",
					"\r\n",
					"# Create a new column for each completion result\r\n",
					"completed_batch_df = completed_batch_df.withColumn(\"Country Code\", col(\"completions.choices.text\").getItem(0))\r\n",
					"completed_batch_df = completed_batch_df.withColumn(\"Street\", col(\"completions.choices.text\").getItem(1))\r\n",
					"completed_batch_df = completed_batch_df.withColumn(\"Postal Code\", col(\"completions.choices.text\").getItem(2))\r\n",
					"\r\n",
					"display(completed_batch_df)\r\n",
					""
				],
				"execution_count": 44
			}
		]
	}
}